import React, { useState, useEffect } from 'react';
import { PageLayout } from '@/components/layout/PageLayout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Separator } from '@/components/ui/separator';
import { cn } from '@/lib/utils';
import { Shield, CheckCircle, Settings, RefreshCw, ArrowRight, ExternalLink, Package, ShoppingBag, Calculator, Truck, Info, Search as SearchIcon, Plug, Mail, Cloud, DollarSign, Zap, FileText } from 'lucide-react';
import { api } from '@/lib/api';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { useNavigate, useSearchParams } from 'react-router-dom';

// ... (keep all the existing interfaces and constants)

export default function IntegrationsHub() {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [lastSyncTime, setLastSyncTime] = useState('Just now');
  const [status, setStatus] = useState<{ amazon_connected: boolean; docs_connected: boolean; providers?: Record<string, boolean> } | null>(null);
  const [loading, setLoading] = useState(false);
  const [disconnecting, setDisconnecting] = useState<string | null>(null);
  const [requestFormData, setRequestFormData] = useState({
    platform: '',
    description: ''
  });
  const [showRequestForm, setShowRequestForm] = useState(false);
  const [showProviderDialog, setShowProviderDialog] = useState(false);
  const [showManualModal, setShowManualModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [waitlistOpen, setWaitlistOpen] = useState(false);
  const [waitlistIntegration, setWaitlistIntegration] = useState<string | null>(null);
  const [waitlistEmail, setWaitlistEmail] = useState('');
  
  // NEW: Shock and Awe state
  const [showRecoveryReveal, setShowRecoveryReveal] = useState(false);
  const [recoveryData, setRecoveryData] = useState<{ totalAmount: number; currency: string; claimCount: number } | null>(null);
  const [showEvidenceModal, setShowEvidenceModal] = useState(false);

  // Check if we just connected Amazon and should show the reveal
  useEffect(() => {
    const amazonConnected = searchParams.get('amazon_connected');
    const recoveryAmount = searchParams.get('recovery_amount');
    
    if (amazonConnected === 'true' && !showRecoveryReveal) {
      // Fetch the actual recovery data
      api.getAmazonRecoveries().then(response => {
        if (response.ok) {
          setRecoveryData(response.data);
          setShowRecoveryReveal(true);
          
          // Auto-show evidence modal after 3 seconds
          setTimeout(() => {
            setShowEvidenceModal(true);
          }, 3000);
        }
      });
    }
  }, [searchParams, showRecoveryReveal]);

  // Real-time sync simulation
  useEffect(() => {
    const interval = setInterval(() => {
      const now = new Date();
      const seconds = now.getSeconds();
      setLastSyncTime(seconds % 10 === 0 ? 'Just now' : \\ seconds ago\);
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    let cancelled = false;
    (async () => {
      const res = await api.getIntegrationsStatus();
      if (!cancelled) {
        if (res.ok && res.data) setStatus(res.data);
      }
    })();
    return () => { cancelled = true };
  }, []);

  // ... (keep all the existing useEffect and handler functions)

  const formatCurrency = (amount: number, currency: string) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currency
    }).format(amount);
  };

  return (
    <PageLayout title="Clario Platform Integrations">
      <div className="space-y-8">
        {/* SHOCK AND AWE: Recovery Reveal Modal */}
        <Dialog open={showRecoveryReveal} onOpenChange={setShowRecoveryReveal}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle className="flex items-center justify-center gap-2 text-2xl text-green-700">
                <Zap className="h-8 w-8" />
                Potential Recoveries Found!
              </DialogTitle>
            </DialogHeader>
            <div className="text-center space-y-6 py-4">
              {recoveryData && (
                <>
                  <div className="space-y-2">
                    <div className="text-5xl font-bold text-green-700">
                      {formatCurrency(recoveryData.totalAmount, recoveryData.currency)}
                    </div>
                    <div className="text-lg text-muted-foreground">
                      in Potential Amazon Recoveries
                    </div>
                    <Badge variant="secondary" className="text-sm">
                      {recoveryData.claimCount} claims identified in your account
                    </Badge>
                  </div>
                  
                  <div className="grid grid-cols-3 gap-4 text-sm">
                    <div className="text-center p-3 bg-green-50 rounded-lg border border-green-200">
                      <FileText className="h-6 w-6 mx-auto mb-2 text-blue-600" />
                      <div>Lost Inventory</div>
                      <div className="font-semibold">{formatCurrency(recoveryData.totalAmount * 0.6, recoveryData.currency)}</div>
                    </div>
                    <div className="text-center p-3 bg-green-50 rounded-lg border border-green-200">
                      <Calculator className="h-6 w-6 mx-auto mb-2 text-orange-600" />
                      <div>Fee Errors</div>
                      <div className="font-semibold">{formatCurrency(recoveryData.totalAmount * 0.3, recoveryData.currency)}</div>
                    </div>
                    <div className="text-center p-3 bg-green-50 rounded-lg border border-green-200">
                      <Package className="h-6 w-6 mx-auto mb-2 text-purple-600" />
                      <div>Shipments</div>
                      <div className="font-semibold">{formatCurrency(recoveryData.totalAmount * 0.1, recoveryData.currency)}</div>
                    </div>
                  </div>

                  <div className="text-sm text-muted-foreground">
                    We found these potential recoveries by analyzing your FBA transaction history.
                  </div>
                </>
              )}
            </div>
          </DialogContent>
        </Dialog>

        {/* SECOND WOW: Evidence Connect Modal */}
        <Dialog open={showEvidenceModal} onOpenChange={setShowEvidenceModal}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle className="flex items-center justify-center gap-2 text-2xl text-blue-700">
                <Shield className="h-8 w-8" />
                Unlock Higher-Value Claims
              </DialogTitle>
              <DialogDescription className="text-center text-lg">
                Connect your email or cloud storage to automatically find and match invoices
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-6 py-4">
              <div className="grid grid-cols-2 gap-4">
                <Card className="border-blue-200 bg-blue-50 text-center p-6">
                  <Mail className="h-12 w-12 mx-auto mb-3 text-blue-600" />
                  <h3 className="font-semibold mb-2">Connect Email</h3>
                  <p className="text-sm text-muted-foreground mb-4">
                    Automatically find purchase invoices in your Gmail or Outlook
                  </p>
                  <Button 
                    className="w-full bg-blue-600 hover:bg-blue-700"
                    onClick={() => {
                      setShowEvidenceModal(false);
                      setShowProviderDialog(true);
                    }}
                  >
                    Connect Email
                  </Button>
                </Card>
                
                <Card className="border-green-200 bg-green-50 text-center p-6">
                  <Cloud className="h-12 w-12 mx-auto mb-3 text-green-600" />
                  <h3 className="font-semibold mb-2">Connect Cloud Storage</h3>
                  <p className="text-sm text-muted-foreground mb-4">
                    Scan Google Drive or Dropbox for receipts and invoices
                  </p>
                  <Button 
                    className="w-full bg-green-600 hover:bg-green-700"
                    onClick={() => {
                      setShowEvidenceModal(false);
                      setShowProviderDialog(true);
                    }}
                  >
                    Connect Cloud
                  </Button>
                </Card>
              </div>

              <div className="text-center space-y-2">
                <div className="flex items-center justify-center gap-2 text-sm text-amber-700">
                  <Info className="h-4 w-4" />
                  <span>Evidence increases claim approval rates by 3x</span>
                </div>
                <Button 
                  variant="outline" 
                  onClick={() => setShowEvidenceModal(false)}
                  className="text-sm"
                >
                  I'll upload documents manually later
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        {/* Header */}
        <div className="text-center">
          <h1 className="text-3xl font-bold mb-2">Clario Platform Integrations</h1>
          <p className="text-muted-foreground">
            Your central command center for all platform connections
          </p>
          {showRecoveryReveal && recoveryData && (
            <div className="mt-4 rounded-lg border border-green-200 bg-green-50 p-4 max-w-md mx-auto">
              <div className="flex items-center justify-center gap-2 text-green-700">
                <DollarSign className="h-5 w-5" />
                <span className="font-semibold">
                  {formatCurrency(recoveryData.totalAmount, recoveryData.currency)} potential recoveries found
                </span>
              </div>
            </div>
          )}
          <div className="mt-3 rounded-md border border-blue-200 bg-blue-50 inline-block px-3 py-2 text-sm text-blue-900">
            Want us to auto-collect invoices & docs for you? Connect Gmail / Outlook / Drive / Dropbox.
          </div>
          <div className="mt-4 max-w-xl mx-auto relative">
            <SearchIcon className="h-4 w-4 text-muted-foreground absolute left-3 top-1/2 -translate-y-1/2" />
            <Input
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="Search integrations (Amazon, Shopify, Gmail…)"
              className="pl-9"
            />
          </div>
        </div>

        {/* Rest of the existing IntegrationsHub content remains the same */}
        {/* ... (all the existing JSX content) */}
      </div>
    </PageLayout>
  );
}


